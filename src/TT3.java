import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class TT3 {
	static class Exit1 extends RuntimeException {}
	static class Exit2 extends RuntimeException {}
	static char in1[] = new char[] {
			0x08,0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0xA0,0x00,0x18,0xC3,0x46,0x00,
			0x00,0xA5,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x35,0x0C,0x00,0x00,0x45,0x6E,0x6F,
			0x20,0x4B,0x68,0x61,0x6F,0x6E,0xA0,0x1F,0x04,0x69,0x47,0x00,0x00,0x5E,0x20,0x1F,
			0x0B,0x55,0x53,0x00,0x00,0x49,0x07,0x00,0x00,0x42,0x69,0x76,0x65,0xC0,0x1B,0x40,
			0x00,0x09,0x64,0x51,0x00,0x00,0x51,0x60,0x1B,0x00,0x52,0x55,0x20,0x07,0x08,0x1D,
			0x00,0x00,0x53,0x69,0x6C,0x76,0x65,0x72,0x40,0x19,0x80,0x00,0x04,0x22,0x5D,0x00,
			0x00,0x52,0x20,0x1F,0x04,0x47,0x42,0x01,0x00,0x5A,0x20,0x1F,0x03,0x73,0x69,0x65,
			0x63,0x20,0x02,0x00,0x68,0x80,0x1D,0x11,0x00,0x00,0x8D,0x61,0x00,0x00,0x10,0x60,
			0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x15,0x00,0x00,0x00,0x00,
	};

	static char out1[] = new char[] {
			0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0xC3,0x46,0x00,0x00,0xA5,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x35,0x0C,0x00,0x00,
			0x45,0x6E,0x6F,0x20,0x4B,0x68,0x61,0x6F,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x69,0x47,0x00,0x00,0x5E,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0x49,0x07,0x00,0x00,
			0x42,0x69,0x76,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x64,0x51,0x00,0x00,0x51,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0x51,0x1D,0x00,0x00,
			0x53,0x69,0x6C,0x76,0x65,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x22,0x5D,0x00,0x00,0x52,0x60,0x1B,0x00,0x47,0x42,0x01,0x00,0x5A,0x1D,0x00,0x00,
			0x73,0x69,0x65,0x63,0x69,0x65,0x63,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x8D,0x61,0x00,0x00,0x10,0x60,0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x15,0x00,0x00,
	};

	static char in2[] = new char[] {
		0x07,0x4D,0x6F,0x6C,0x6C,0x65,0x72,0x74,0x00,0xC0,0x00,0x17,0x62,0x20,0x00,0x00,
		0x7B,0x60,0x1B,0x00,0x44,0x45,0x00,0x00,0x2B,0x1F,0x00,0x00,0x63,0x65,0x72,0x61,
		0x6E,0x6B,0x61,0x73,0xC0,0x1F,0x04,0x5B,0x21,0x00,0x00,0x8A,0x20,0x1F,0x04,0x50,
		0x4C,0x00,0x00,0x18,0x20,0x2B,0x03,0x6C,0x75,0x6B,0x65,0xC0,0x1B,0x40,0x00,0x00,
		0xDE,0x20,0x1F,0x00,0x33,0x20,0x1F,0x0D,0x47,0x42,0x01,0x00,0x0D,0x1A,0x00,0x00,
		0x53,0x69,0x6C,0x76,0x65,0x72,0x40,0x19,0x80,0x00,0x05,0x18,0x27,0x00,0x00,0x4D,
		0x5F,0x80,0x1F,0x0C,0xA9,0x05,0x00,0x00,0x45,0x4D,0x75,0x6C,0x61,0x77,0x73,0x6B,
		0x69,0x80,0x1E,0x01,0x00,0xA2,0x20,0x1F,0x00,0xB2,0x20,0x1F,0x10,0x55,0x53,0x00,
		0x00,0x5A,0x0E,0x00,0x00,0x57,0x61,0x72,0x72,0x69,0x6F,0x72,0x41,0x74,0x20,0x08,
		0x20,0x1E,0x05,0x00,0x34,0x28,0x00,0x00,0x3F,0x20,0x1F,0x0D,0x50,0x54,0x00,0x00,
		0x42,0x03,0x00,0x00,0x4F,0x73,0x77,0x61,0x6C,0x64,0x20,0x18,0xA0,0x00,0x04,0x85,
		0x2E,0x00,0x00,0xBF,0x40,0x1F,0x13,0x4C,0x00,0x01,0x76,0x10,0x00,0x00,0x64,0x75,
		0x64,0x65,0x5F,0x31,0x65,0x33,0x39,0x35,0x62,0x66,0x35,0x20,0x23,0x04,0xCD,0x3A,
		0x00,0x00,0xAB,0x20,0x9F,0x0B,0x42,0x52,0x00,0x01,0x96,0x25,0x00,0x00,0x46,0x61,
		0x75,0x78,0x20,0x16,0xE0,0x00,0x00,0x04,0x8A,0x3E,0x00,0x00,0x37,0x20,0x1F,0x04,
		0x47,0x42,0x00,0x01,0x9A,0x20,0xBF,0x02,0x6C,0x6F,0x75,0x20,0x02,0xE0,0x00,0x1E,
		0x05,0x00,0x8E,0x46,0x00,0x00,0x2D,0xA0,0x1F,0x0A,0x42,0x19,0x00,0x00,0x4D,0x69,
		0x78,0x65,0x72,0x62,0x61,0x20,0x19,0x80,0x00,0x04,0x95,0x47,0x00,0x00,0xC8,0x20,
		0x7F,0x00,0x52,0x20,0xBF,0x01,0xA6,0x11,0x21,0x3F,0x04,0x61,0x6D,0x69,0x6C,0x65,
		0xE1,0x00,0x3E,0x05,0x00,0xF4,0x48,0x00,0x00,0xBB,0x20,0x1F,0x20,0x5F,0x06,0x00,
		0xC9,0x0F,0x00,0x00,0x49,0x72,0xE1,0x04,0x3E,0x01,0x00,0xA4,0x20,0xD7,0x00,0x96,
		0x20,0x5F,0x04,0x43,0x5A,0x00,0x00,0xAD,0x21,0x4B,0x07,0x6E,0x6F,0x31,0x6B,0x6E,
		0x6F,0x77,0x6D,0xC0,0x25,0x04,0x0E,0x60,0x00,0x00,0x30,0x20,0x3F,0x20,0xDF,0x01,
		0x00,0x4D,0x20,0x2F,0x60,0xDF,0x07,0x61,0x33,0x34,0x35,0x38,0x33,0x61,0x31,0x20,
		0x0F,0x04,0xC0,0x63,0x00,0x00,0x31,0x20,0x3F,0x20,0xDF,0x01,0x00,0xE8,0x20,0x9F,
		0x60,0x1F,0x0F,0x64,0x37,0x34,0x36,0x65,0x65,0x32,0x34,0x00,0x00,0x00,0x9E,0x68,
		0x00,0x00,0xD2,0x20,0x3F,0x00,0x43,0x20,0x87,0x01,0xA1,0x12,0xA0,0x1F,0x07,0x65,
		0x35,0x33,0x33,0x61,0x32,0x31,0x39,0x20,0x1F,0x04,0x25,0x71,0x00,0x00,0x9A,0x20,
		0x3F,0x09,0x52,0x55,0x00,0x00,0x5E,0x22,0x00,0x00,0x44,0x6A,0xE0,0x05,0xBF,0x00,
		0xAF,0x20,0xCA,0x00,0x9F,0x20,0x1F,0x40,0xBF,0x05,0x68,0x23,0x00,0x00,0x70,0x61,
		0xE2,0x02,0x3C,0x20,0x00,0x00,0xCF,0x21,0x4D,0x00,0x0F,0x20,0x1F,0x06,0x42,0x59,
		0x00,0x00,0xED,0x14,0x00,0x80,0x7F,0x06,0x30,0x31,0x66,0x37,0x62,0x38,0x30,0x41,
		0x7F,0x01,0xF5,0x82,0xE0,0x01,0x7F,0x00,0xA5,0x20,0x7F,0x06,0x6D,0x7A,0x75,0x6E,
		0x64,0x65,0x6C,0x20,0x39,0x80,0x00,0x01,0xA6,0x91,0x20,0x77,0x20,0x3F,0x00,0x41,
		0x20,0xBF,0x09,0xBE,0x1D,0x00,0x00,0x41,0x6E,0x64,0x72,0x65,0x77,0x80,0x1B,0x40,
		0x00,0x04,0xED,0x97,0x00,0x00,0x4E,0x20,0xBF,0x42,0x1F,0x00,0xE4,0x22,0x3F,0x60,
		0xDF,0x06,0x66,0x37,0x66,0x39,0x61,0x38,0x37,0x41,0x85,0x0F,0x3E,0x21,0x01,0x00,
		0x3F,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0xBB,0x1B,0x00,0x00,0x00,0x00,0x00,0x00,
	};

	static char out2[] = new char[] {
		0x4D,0x6F,0x6C,0x6C,0x65,0x72,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x62,0x20,0x00,0x00,0x7B,0x60,0x1B,0x00,0x44,0x45,0x00,0x00,0x2B,0x1F,0x00,0x00,
		0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x5B,0x21,0x00,0x00,0x8A,0x60,0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x20,0x00,0x00,
		0x6C,0x75,0x6B,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xDE,0x21,0x00,0x00,0x33,0x60,0x1B,0x00,0x47,0x42,0x01,0x00,0x0D,0x1A,0x00,0x00,
		0x53,0x69,0x6C,0x76,0x65,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x18,0x27,0x00,0x00,0x4D,0x5F,0x1B,0x00,0x47,0x42,0x01,0x00,0xA9,0x05,0x00,0x00,
		0x45,0x4D,0x75,0x6C,0x61,0x77,0x73,0x6B,0x69,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA2,0x27,0x00,0x00,0xB2,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0x5A,0x0E,0x00,0x00,
		0x57,0x61,0x72,0x72,0x69,0x6F,0x72,0x41,0x74,0x57,0x61,0x72,0x00,0x00,0x00,0x00,
		0x34,0x28,0x00,0x00,0x3F,0x5F,0x1B,0x00,0x50,0x54,0x00,0x00,0x42,0x03,0x00,0x00,
		0x4F,0x73,0x77,0x61,0x6C,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x85,0x2E,0x00,0x00,0xBF,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x01,0x76,0x10,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x31,0x65,0x33,0x39,0x35,0x62,0x66,0x35,0x00,0x00,0x00,
		0xCD,0x3A,0x00,0x00,0xAB,0x60,0x1B,0x00,0x42,0x52,0x00,0x01,0x96,0x25,0x00,0x00,
		0x46,0x61,0x75,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x8A,0x3E,0x00,0x00,0x37,0x60,0x1B,0x00,0x47,0x42,0x00,0x01,0x9A,0x1A,0x00,0x00,
		0x6C,0x6F,0x75,0x6C,0x6F,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x8E,0x46,0x00,0x00,0x2D,0x60,0x1B,0x00,0x47,0x42,0x00,0x01,0x42,0x19,0x00,0x00,
		0x4D,0x69,0x78,0x65,0x72,0x62,0x61,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x95,0x47,0x00,0x00,0xC8,0x5F,0x1B,0x00,0x52,0x53,0x00,0x00,0xA6,0x11,0x00,0x00,
		0x63,0x61,0x6D,0x69,0x6C,0x65,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xF4,0x48,0x00,0x00,0xBB,0x5F,0x1B,0x00,0x47,0x42,0x00,0x00,0xC9,0x0F,0x00,0x00,
		0x49,0x72,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA4,0x54,0x00,0x00,0x96,0x60,0x1B,0x00,0x43,0x5A,0x00,0x00,0xAD,0x21,0x00,0x00,
		0x6E,0x6F,0x31,0x6B,0x6E,0x6F,0x77,0x6D,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x0E,0x60,0x00,0x00,0x30,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x4D,0x00,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x61,0x33,0x34,0x35,0x38,0x33,0x61,0x31,0x00,0x00,0x00,
		0xC0,0x63,0x00,0x00,0x31,0x60,0x1B,0x00,0x42,0x52,0x00,0x00,0xE8,0x19,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x64,0x37,0x34,0x36,0x65,0x65,0x32,0x34,0x00,0x00,0x00,
		0x9E,0x68,0x00,0x00,0xD2,0x5F,0x1B,0x00,0x43,0x48,0x00,0x00,0xA1,0x12,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x65,0x35,0x33,0x33,0x61,0x32,0x31,0x39,0x00,0x00,0x00,
		0x25,0x71,0x00,0x00,0x9A,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0x5E,0x22,0x00,0x00,
		0x44,0x6A,0x6D,0x69,0x6C,0x65,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xAF,0x73,0x00,0x00,0x9F,0x60,0x1B,0x00,0x47,0x42,0x00,0x00,0x68,0x23,0x00,0x00,
		0x70,0x61,0x72,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xCF,0x78,0x00,0x00,0x0F,0x60,0x1B,0x00,0x42,0x59,0x00,0x00,0xED,0x14,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x30,0x31,0x66,0x37,0x62,0x38,0x30,0x35,0x00,0x00,0x00,
		0xF5,0x82,0x00,0x00,0xD2,0x5F,0x1B,0x00,0x43,0x48,0x00,0x00,0xA5,0x12,0x00,0x00,
		0x6D,0x7A,0x75,0x6E,0x64,0x65,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA6,0x91,0x00,0x00,0x5E,0x60,0x1B,0x00,0x41,0x52,0x00,0x00,0xBE,0x1D,0x00,0x00,
		0x41,0x6E,0x64,0x72,0x65,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xED,0x97,0x00,0x00,0x4E,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0xE4,0x05,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x66,0x37,0x66,0x39,0x61,0x38,0x37,0x61,0x00,0x00,0x00,
		0x3E,0x21,0x01,0x00,0x3F,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0xBB,0x1B,0x00,0x00,
		0x00
	};

	static class Score {
        private final String name;
        private final double time;
        private final boolean hard;
        private final boolean online;

        public Score(String name, double time, boolean hard, boolean online) {
            this.name = name;
            this.time = time;
            this.hard = hard;
            this.online = online;
        }

        @Override
        public String toString() {
            return "Score [name=" + name + ", time=" + time + ","
            + (hard ? " (hard)" : "")
            + (online ? " (online)" : "") + "]";
        }
	}

	public static void main(String[] args) {
		System.out.println(Arrays.equals(decode(in1), out1));
		System.out.println(Arrays.equals(decode(in2), out2));

		for (Score s : parse(out2))
		    System.out.println(s);
	}

	static List<Score> parse(char[] b) {
		final List<Score> ret = new ArrayList<Score>(b.length / 32);
		int ptr = 0;
		while (ptr < b.length - 15) {
			final String name = cstring(b, ptr, 16);
			ptr += 16;
			final double time = dword(b, ptr) / 120.;
			ptr += 4;
			final boolean hard = b[ptr + 6] != 0;
			final boolean online = b[ptr + 7] != 0;
			ptr += 12;
			ret.add(new Score(name, time, hard, online));
		}
		return ret;
	}

	private static long dword(char[] b, int ptr) {
		return (b[ptr] + (b[ptr + 1] << 8));
	}

	private static String cstring(char[] b, int ptr, int i) {
		final String s = new String(b, ptr, i);
		final int ind = s.indexOf(0);
		if (-1 == ind)
			return s;
		return s.substring(0, ind);
	}

	static char[] decode(char[] in) {
		char[] out = new char[9000];

		int outptr = 0;
		int inptr = 0;
		char flag = in[inptr++];
		flag &= 0x1f;
		char esp10 = flag;

		while (true) {
			if (flag >= 0x20) {

				char highflag = (char) (flag >> 5);
				int lowflag = -((flag & 0x1f) << 8);

				--highflag;

				if (6 == highflag) {
					highflag = (char) (in[inptr++] + 6);
				}

				lowflag -= in[inptr++];

				int sourceptr = outptr + lowflag;

				if (inptr < in.length)
					esp10 = flag = in[inptr++];
				else
					throw new AssertionError();

				if (outptr == sourceptr) {

					char thing = out[outptr - 1];

					out[outptr++] = thing;
					out[outptr++] = thing;
					out[outptr++] = thing;

					if (highflag != 0) {

						flag = esp10;

						for (int i = 0; i < highflag; ++i)
							out[outptr++] = thing;
					}
				} else {

					--sourceptr;

					out[outptr++] = out[sourceptr++];
					out[outptr++] = out[sourceptr++];
					out[outptr++] = out[sourceptr++];

					if ((highflag & 1) == 1) {

						out[outptr++] = out[sourceptr++];

						--highflag;
					}

					int tooutptr = outptr;
					outptr += highflag;
					highflag >>= 1;

					while (highflag != 0) {
						out[tooutptr++] = out[sourceptr++];
						out[tooutptr++] = out[sourceptr++];

						--highflag;
					}
				}
			} else {
				++flag;
				int inend = inptr + flag;
				if (inend >= in.length)
					return Arrays.copyOfRange(out, 0, outptr);

				for (int i = 0; i < flag; ++i)
					out[outptr++] = in[inptr++];

				flag = in[inptr++];
				esp10 = flag;
			}
		}

	}
}
