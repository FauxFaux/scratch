import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class TT3 {
	static class Exit1 extends RuntimeException {}
	static class Exit2 extends RuntimeException {}
	static char in1[] = new char[] {
			0x08,0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0xA0,0x00,0x18,0xC3,0x46,0x00,
			0x00,0xA5,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x35,0x0C,0x00,0x00,0x45,0x6E,0x6F,
			0x20,0x4B,0x68,0x61,0x6F,0x6E,0xA0,0x1F,0x04,0x69,0x47,0x00,0x00,0x5E,0x20,0x1F,
			0x0B,0x55,0x53,0x00,0x00,0x49,0x07,0x00,0x00,0x42,0x69,0x76,0x65,0xC0,0x1B,0x40,
			0x00,0x09,0x64,0x51,0x00,0x00,0x51,0x60,0x1B,0x00,0x52,0x55,0x20,0x07,0x08,0x1D,
			0x00,0x00,0x53,0x69,0x6C,0x76,0x65,0x72,0x40,0x19,0x80,0x00,0x04,0x22,0x5D,0x00,
			0x00,0x52,0x20,0x1F,0x04,0x47,0x42,0x01,0x00,0x5A,0x20,0x1F,0x03,0x73,0x69,0x65,
			0x63,0x20,0x02,0x00,0x68,0x80,0x1D,0x11,0x00,0x00,0x8D,0x61,0x00,0x00,0x10,0x60,
			0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x15,0x00,0x00,0x00,0x00,
	};

	static char out1[] = new char[] {
			0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0xC3,0x46,0x00,0x00,0xA5,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x35,0x0C,0x00,0x00,
			0x45,0x6E,0x6F,0x20,0x4B,0x68,0x61,0x6F,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x69,0x47,0x00,0x00,0x5E,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0x49,0x07,0x00,0x00,
			0x42,0x69,0x76,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x64,0x51,0x00,0x00,0x51,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0x51,0x1D,0x00,0x00,
			0x53,0x69,0x6C,0x76,0x65,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x22,0x5D,0x00,0x00,0x52,0x60,0x1B,0x00,0x47,0x42,0x01,0x00,0x5A,0x1D,0x00,0x00,
			0x73,0x69,0x65,0x63,0x69,0x65,0x63,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x8D,0x61,0x00,0x00,0x10,0x60,0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x15,0x00,0x00,
	};

	static char in2[] = new char[] {
		0x07,0x4D,0x6F,0x6C,0x6C,0x65,0x72,0x74,0x00,0xC0,0x00,0x17,0x62,0x20,0x00,0x00,
		0x7B,0x60,0x1B,0x00,0x44,0x45,0x00,0x00,0x2B,0x1F,0x00,0x00,0x63,0x65,0x72,0x61,
		0x6E,0x6B,0x61,0x73,0xC0,0x1F,0x04,0x5B,0x21,0x00,0x00,0x8A,0x20,0x1F,0x04,0x50,
		0x4C,0x00,0x00,0x18,0x20,0x2B,0x03,0x6C,0x75,0x6B,0x65,0xC0,0x1B,0x40,0x00,0x00,
		0xDE,0x20,0x1F,0x00,0x33,0x20,0x1F,0x0D,0x47,0x42,0x01,0x00,0x0D,0x1A,0x00,0x00,
		0x53,0x69,0x6C,0x76,0x65,0x72,0x40,0x19,0x80,0x00,0x05,0x18,0x27,0x00,0x00,0x4D,
		0x5F,0x80,0x1F,0x0C,0xA9,0x05,0x00,0x00,0x45,0x4D,0x75,0x6C,0x61,0x77,0x73,0x6B,
		0x69,0x80,0x1E,0x01,0x00,0xA2,0x20,0x1F,0x00,0xB2,0x20,0x1F,0x10,0x55,0x53,0x00,
		0x00,0x5A,0x0E,0x00,0x00,0x57,0x61,0x72,0x72,0x69,0x6F,0x72,0x41,0x74,0x20,0x08,
		0x20,0x1E,0x05,0x00,0x34,0x28,0x00,0x00,0x3F,0x20,0x1F,0x0D,0x50,0x54,0x00,0x00,
		0x42,0x03,0x00,0x00,0x4F,0x73,0x77,0x61,0x6C,0x64,0x20,0x18,0xA0,0x00,0x04,0x85,
		0x2E,0x00,0x00,0xBF,0x40,0x1F,0x13,0x4C,0x00,0x01,0x76,0x10,0x00,0x00,0x64,0x75,
		0x64,0x65,0x5F,0x31,0x65,0x33,0x39,0x35,0x62,0x66,0x35,0x20,0x23,0x04,0xCD,0x3A,
		0x00,0x00,0xAB,0x20,0x9F,0x0B,0x42,0x52,0x00,0x01,0x96,0x25,0x00,0x00,0x46,0x61,
		0x75,0x78,0x20,0x16,0xE0,0x00,0x00,0x04,0x8A,0x3E,0x00,0x00,0x37,0x20,0x1F,0x04,
		0x47,0x42,0x00,0x01,0x9A,0x20,0xBF,0x02,0x6C,0x6F,0x75,0x20,0x02,0xE0,0x00,0x1E,
		0x05,0x00,0x8E,0x46,0x00,0x00,0x2D,0xA0,0x1F,0x0A,0x42,0x19,0x00,0x00,0x4D,0x69,
		0x78,0x65,0x72,0x62,0x61,0x20,0x19,0x80,0x00,0x04,0x95,0x47,0x00,0x00,0xC8,0x20,
		0x7F,0x00,0x52,0x20,0xBF,0x01,0xA6,0x11,0x21,0x3F,0x04,0x61,0x6D,0x69,0x6C,0x65,
		0xE1,0x00,0x3E,0x05,0x00,0xF4,0x48,0x00,0x00,0xBB,0x20,0x1F,0x20,0x5F,0x06,0x00,
		0xC9,0x0F,0x00,0x00,0x49,0x72,0xE1,0x04,0x3E,0x01,0x00,0xA4,0x20,0xD7,0x00,0x96,
		0x20,0x5F,0x04,0x43,0x5A,0x00,0x00,0xAD,0x21,0x4B,0x07,0x6E,0x6F,0x31,0x6B,0x6E,
		0x6F,0x77,0x6D,0xC0,0x25,0x04,0x0E,0x60,0x00,0x00,0x30,0x20,0x3F,0x20,0xDF,0x01,
		0x00,0x4D,0x20,0x2F,0x60,0xDF,0x07,0x61,0x33,0x34,0x35,0x38,0x33,0x61,0x31,0x20,
		0x0F,0x04,0xC0,0x63,0x00,0x00,0x31,0x20,0x3F,0x20,0xDF,0x01,0x00,0xE8,0x20,0x9F,
		0x60,0x1F,0x0F,0x64,0x37,0x34,0x36,0x65,0x65,0x32,0x34,0x00,0x00,0x00,0x9E,0x68,
		0x00,0x00,0xD2,0x20,0x3F,0x00,0x43,0x20,0x87,0x01,0xA1,0x12,0xA0,0x1F,0x07,0x65,
		0x35,0x33,0x33,0x61,0x32,0x31,0x39,0x20,0x1F,0x04,0x25,0x71,0x00,0x00,0x9A,0x20,
		0x3F,0x09,0x52,0x55,0x00,0x00,0x5E,0x22,0x00,0x00,0x44,0x6A,0xE0,0x05,0xBF,0x00,
		0xAF,0x20,0xCA,0x00,0x9F,0x20,0x1F,0x40,0xBF,0x05,0x68,0x23,0x00,0x00,0x70,0x61,
		0xE2,0x02,0x3C,0x20,0x00,0x00,0xCF,0x21,0x4D,0x00,0x0F,0x20,0x1F,0x06,0x42,0x59,
		0x00,0x00,0xED,0x14,0x00,0x80,0x7F,0x06,0x30,0x31,0x66,0x37,0x62,0x38,0x30,0x41,
		0x7F,0x01,0xF5,0x82,0xE0,0x01,0x7F,0x00,0xA5,0x20,0x7F,0x06,0x6D,0x7A,0x75,0x6E,
		0x64,0x65,0x6C,0x20,0x39,0x80,0x00,0x01,0xA6,0x91,0x20,0x77,0x20,0x3F,0x00,0x41,
		0x20,0xBF,0x09,0xBE,0x1D,0x00,0x00,0x41,0x6E,0x64,0x72,0x65,0x77,0x80,0x1B,0x40,
		0x00,0x04,0xED,0x97,0x00,0x00,0x4E,0x20,0xBF,0x42,0x1F,0x00,0xE4,0x22,0x3F,0x60,
		0xDF,0x06,0x66,0x37,0x66,0x39,0x61,0x38,0x37,0x41,0x85,0x0F,0x3E,0x21,0x01,0x00,
		0x3F,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0xBB,0x1B,0x00,0x00,0x00,0x00,0x00,0x00,
	};

	static char out2[] = new char[] {
		0x4D,0x6F,0x6C,0x6C,0x65,0x72,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x62,0x20,0x00,0x00,0x7B,0x60,0x1B,0x00,0x44,0x45,0x00,0x00,0x2B,0x1F,0x00,0x00,
		0x63,0x65,0x72,0x61,0x6E,0x6B,0x61,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x5B,0x21,0x00,0x00,0x8A,0x60,0x1B,0x00,0x50,0x4C,0x00,0x00,0x18,0x20,0x00,0x00,
		0x6C,0x75,0x6B,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xDE,0x21,0x00,0x00,0x33,0x60,0x1B,0x00,0x47,0x42,0x01,0x00,0x0D,0x1A,0x00,0x00,
		0x53,0x69,0x6C,0x76,0x65,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x18,0x27,0x00,0x00,0x4D,0x5F,0x1B,0x00,0x47,0x42,0x01,0x00,0xA9,0x05,0x00,0x00,
		0x45,0x4D,0x75,0x6C,0x61,0x77,0x73,0x6B,0x69,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA2,0x27,0x00,0x00,0xB2,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0x5A,0x0E,0x00,0x00,
		0x57,0x61,0x72,0x72,0x69,0x6F,0x72,0x41,0x74,0x57,0x61,0x72,0x00,0x00,0x00,0x00,
		0x34,0x28,0x00,0x00,0x3F,0x5F,0x1B,0x00,0x50,0x54,0x00,0x00,0x42,0x03,0x00,0x00,
		0x4F,0x73,0x77,0x61,0x6C,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x85,0x2E,0x00,0x00,0xBF,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x01,0x76,0x10,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x31,0x65,0x33,0x39,0x35,0x62,0x66,0x35,0x00,0x00,0x00,
		0xCD,0x3A,0x00,0x00,0xAB,0x60,0x1B,0x00,0x42,0x52,0x00,0x01,0x96,0x25,0x00,0x00,
		0x46,0x61,0x75,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x8A,0x3E,0x00,0x00,0x37,0x60,0x1B,0x00,0x47,0x42,0x00,0x01,0x9A,0x1A,0x00,0x00,
		0x6C,0x6F,0x75,0x6C,0x6F,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x8E,0x46,0x00,0x00,0x2D,0x60,0x1B,0x00,0x47,0x42,0x00,0x01,0x42,0x19,0x00,0x00,
		0x4D,0x69,0x78,0x65,0x72,0x62,0x61,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x95,0x47,0x00,0x00,0xC8,0x5F,0x1B,0x00,0x52,0x53,0x00,0x00,0xA6,0x11,0x00,0x00,
		0x63,0x61,0x6D,0x69,0x6C,0x65,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xF4,0x48,0x00,0x00,0xBB,0x5F,0x1B,0x00,0x47,0x42,0x00,0x00,0xC9,0x0F,0x00,0x00,
		0x49,0x72,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA4,0x54,0x00,0x00,0x96,0x60,0x1B,0x00,0x43,0x5A,0x00,0x00,0xAD,0x21,0x00,0x00,
		0x6E,0x6F,0x31,0x6B,0x6E,0x6F,0x77,0x6D,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x0E,0x60,0x00,0x00,0x30,0x5F,0x1B,0x00,0x50,0x4C,0x00,0x00,0x4D,0x00,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x61,0x33,0x34,0x35,0x38,0x33,0x61,0x31,0x00,0x00,0x00,
		0xC0,0x63,0x00,0x00,0x31,0x60,0x1B,0x00,0x42,0x52,0x00,0x00,0xE8,0x19,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x64,0x37,0x34,0x36,0x65,0x65,0x32,0x34,0x00,0x00,0x00,
		0x9E,0x68,0x00,0x00,0xD2,0x5F,0x1B,0x00,0x43,0x48,0x00,0x00,0xA1,0x12,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x65,0x35,0x33,0x33,0x61,0x32,0x31,0x39,0x00,0x00,0x00,
		0x25,0x71,0x00,0x00,0x9A,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0x5E,0x22,0x00,0x00,
		0x44,0x6A,0x6D,0x69,0x6C,0x65,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xAF,0x73,0x00,0x00,0x9F,0x60,0x1B,0x00,0x47,0x42,0x00,0x00,0x68,0x23,0x00,0x00,
		0x70,0x61,0x72,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xCF,0x78,0x00,0x00,0x0F,0x60,0x1B,0x00,0x42,0x59,0x00,0x00,0xED,0x14,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x30,0x31,0x66,0x37,0x62,0x38,0x30,0x35,0x00,0x00,0x00,
		0xF5,0x82,0x00,0x00,0xD2,0x5F,0x1B,0x00,0x43,0x48,0x00,0x00,0xA5,0x12,0x00,0x00,
		0x6D,0x7A,0x75,0x6E,0x64,0x65,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xA6,0x91,0x00,0x00,0x5E,0x60,0x1B,0x00,0x41,0x52,0x00,0x00,0xBE,0x1D,0x00,0x00,
		0x41,0x6E,0x64,0x72,0x65,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xED,0x97,0x00,0x00,0x4E,0x5F,0x1B,0x00,0x55,0x53,0x00,0x00,0xE4,0x05,0x00,0x00,
		0x64,0x75,0x64,0x65,0x5F,0x66,0x37,0x66,0x39,0x61,0x38,0x37,0x61,0x00,0x00,0x00,
		0x3E,0x21,0x01,0x00,0x3F,0x60,0x1B,0x00,0x52,0x55,0x00,0x00,0xBB,0x1B,0x00,0x00,
		0x00
	};

	static char in3[] = new char[] { 88, 189, 11, 8, 24, 177, 5, 8, 152, 92, 138, 191, 188, 114, 6, 8, 64, 35, 4, 36,
			94, 138, 191, 200, 32, 15, 0, 250, 224, 2, 15, 12, 168, 1, 16, 183, 152, 52, 16, 183, 20, 184, 35, 9, 194,
			32, 57, 64, 39, 64, 3, 192, 63, 5, 8, 93, 138, 191, 130, 145, 128, 63, 12, 140, 26, 0, 0, 67, 4, 0, 0, 212,
			7, 0, 0, 245, 32, 127, 4, 251, 3, 0, 0, 117, 32, 139, 3, 17, 147, 6, 8, 32, 58, 96, 0, 0, 84, 32, 139, 64,
			3, 192, 63, 0, 40, 32, 63, 0, 50, 224, 6, 31, 3, 78, 111, 6, 8, 32, 202, 1, 0, 84, 32, 27, 0, 72, 32, 3, 0,
			90, 224, 2, 31, 64, 15, 1, 69, 92, 224, 1, 79, 0, 168, 32, 31, 3, 150, 171, 6, 8, 64, 79, 32, 50, 96, 0, 0,
			244, 32, 123, 0, 123, 32, 9, 0, 2, 32, 7, 0, 90, 32, 7, 0, 176, 32, 3, 0, 144, 32, 3, 64, 0, 0, 136, 32,
			47, 4, 87, 73, 6, 8, 236, 32, 7, 64, 199, 0, 152, 32, 7, 2, 165, 42, 5, 224, 0, 15, 0, 184, 32, 15, 1, 140,
			48, 128, 15, 64, 47, 64, 0, 0, 196, 32, 31, 64, 7, 64, 0, 0, 216, 32, 31, 0, 199, 224, 2, 31, 64, 71, 1,
			181, 44, 128, 47, 32, 110, 1, 0, 248, 32, 31, 5, 97, 114, 99, 104, 101, 101, 32, 12, 224, 18, 0, 64, 123,
			0, 5, 64, 31, 32, 89, 0, 159, 32, 56, 0, 200, 33, 39, 0, 220, 32, 15, 0, 56, 32, 11, 0, 70, 32, 7, 64, 31,
			225, 91, 179, 0, 86, 33, 104, 0, 229, 32, 115, 0, 39, 33, 171, 0, 183, 32, 119, 0, 50, 32, 11, 0, 211, 32,
			3, 225, 107, 179, 0, 57, 32, 127, 0, 143, 32, 3, 0, 31, 32, 3, 0, 69, 32, 3, 0, 119, 32, 3, 64, 0, 225,
			131, 179, 64, 143, 4, 236, 19, 0, 0, 40, 33, 47, 0, 55, 32, 3, 0, 248, 32, 16, 0, 146, 33, 187, 0, 168, 33,
			51, 225, 95, 179, 0, 168, 34, 56, 0, 120, 32, 119, 0, 231, 32, 127, 0, 226, 32, 7, 0, 211, 32, 3, 0, 59,
			32, 3, 225, 107, 179, 0, 15, 32, 119, 0, 212, 32, 3, 65, 187, 0, 54, 32, 7, 0, 22, 32, 3, 64, 0, 225, 131,
			179, 33, 38, 1, 0, 112, 33, 51, 0, 21, 33, 163, 0, 157, 32, 3, 0, 127, 32, 15, 68, 19, 0, 218, 32, 7, 225,
			95, 179, 4, 51, 7, 0, 0, 158, 32, 111, 0, 48, 32, 140, 0, 89, 32, 7, 0, 62, 32, 135, 0, 60, 32, 7, 225,
			107, 179, 70, 19, 0, 138, 32, 123, 0, 24, 32, 3, 64, 0, 37, 182, 96, 0, 225, 131, 179, 0, 167, 33, 31, 0,
			104, 35, 87, 66, 83, 3, 236, 255, 255, 255, 33, 190, 1, 0, 250, 32, 7, 68, 23, 225, 95, 179, 0, 169, 32,
			127, 65, 35, 0, 217, 32, 123, 0, 29, 32, 3, 0, 102, 32, 3, 33, 198, 225, 104, 179, 0, 237, 33, 11, 38, 38,
			99, 243, 192, 0, 64, 135, 64, 0, 225, 131, 179, 39, 250, 1, 0, 244, 33, 168, 0, 165, 32, 175, 70, 79, 0,
			17, 32, 7, 0, 143, 32, 3, 0, 199, 32, 23, 225, 95, 179, 0, 242, 37, 161, 0, 158, 32, 115, 0, 174, 33, 187,
			0, 124, 32, 119, 0, 69, 32, 11, 0, 185, 32, 3, 227, 107, 103, 0, 50, 32, 127, 68, 107, 70, 207, 0, 58, 32,
			11, 1, 128, 0, 128, 0, 225, 131, 179, 0, 6, 32, 146, 0, 83, 37, 196, 0, 52, 36, 151, 0, 73, 33, 39, 0, 135,
			32, 15, 0, 28, 32, 11, 0, 29, 32, 11, 225, 95, 179, 0, 178, 32, 107, 0, 14, 32, 119, 35, 222, 96, 0, 0,
			114, 32, 11, 0, 76, 32, 3, 225, 103, 179, 0, 188, 32, 115, 32, 250, 224, 0, 0, 67, 243, 67, 255, 64, 0,
			225, 131, 179, 67, 251, 0, 213, 32, 168, 0, 61, 33, 55, 0, 116, 32, 156, 0, 93, 32, 3, 0, 167, 32, 3, 0,
			163, 32, 3, 225, 95, 179, 0, 138, 35, 236, 66, 223, 0, 238, 32, 135, 66, 51, 0, 6, 32, 139, 0, 20, 32, 127,
			225, 103, 179, 0, 119, 32, 119, 64, 0, 67, 103, 64, 0, 0, 43, 32, 4, 0, 11, 32, 3, 64, 0, 225, 131, 179,
			69, 191, 0, 248, 33, 184, 0, 194, 32, 175, 0, 50, 33, 59, 0, 96, 32, 7, 0, 196, 32, 3, 0, 114, 32, 3, 225,
			95, 179, 0, 68, 32, 119, 4, 139, 0, 0, 0, 135, 32, 115, 0, 46, 32, 7, 0, 112, 32, 3, 65, 43, 225, 103, 179,
			0, 176, 32, 127, 74, 39, 0, 80, 32, 127, 67, 247, 0, 30, 32, 7, 38, 54, 96, 0, 225, 131, 179, 38, 74, 1, 0,
			65, 32, 160, 0, 120, 34, 227, 0, 221, 37, 40, 0, 85, 38, 83, 0, 194, 32, 11, 0, 134, 32, 191, 225, 95, 179,
			0, 205, 32, 107, 67, 87, 0, 213, 32, 7, 70, 71, 0, 97, 32, 147, 45, 178, 225, 104, 179, 0, 203, 32, 115,
			65, 163, 0, 105, 32, 7, 65, 23, 64, 147, 33, 18, 96, 0, 225, 131, 179, 0, 10, 32, 145, 0, 179, 35, 108, 0,
			126, 33, 47, 0, 220, 32, 3, 0, 179, 32, 15, 0, 172, 32, 3, 0, 195, 32, 3, 225, 95, 179, 0, 145, 34, 39, 0,
			13, 32, 111, 0, 63, 32, 7, 0, 74, 32, 7, 0, 193, 32, 3, 65, 43, 227, 103, 103, 0, 252, 32, 119, 32, 130, 2,
			0, 96, 0, 128, 0, 0, 35, 32, 6, 64, 15, 64, 0, 225, 131, 179, 0, 163, 33, 167, 0, 107, 32, 3, 77, 15, 0,
			233, 32, 156, 0, 40, 32, 3, 0, 187, 32, 3, 0, 98, 32, 3, 225, 95, 179, 73, 159, 35, 218, 0, 0, 81, 182, 37,
			166, 103, 247, 64, 15, 225, 95, 179, 0, 82, 64, 108, 32, 0, 0, 42, 32, 3, 64, 10, 76, 231, 67, 111, 0, 21,
			32, 15, 37, 182, 96, 0, 225, 107, 179, 14, 73, 32, 103, 111, 32, 117, 112, 115, 116, 97, 105, 114, 115, 33,
			0, 116, 103, 65, 147, 0, 175, 33, 175, 0, 16, 32, 3, 64, 175, 0, 178, 32, 157, 0, 41, 32, 3, 77, 31, 72,
			139, 64, 31, 242, 91, 187, 0, 48, 32, 115, 65, 27, 67, 107, 67, 95, 64, 139, 65, 51, 225, 95, 179, 0, 107,
			65, 168, 32, 0, 0, 37, 32, 3, 64, 119, 38, 42, 96, 135, 0, 39, 32, 7, 64, 15, 64, 0, 225, 107, 179, 14,
			108, 111, 97, 100, 105, 110, 103, 32, 97, 32, 116, 114, 117, 99, 107, 225, 0, 179, 0, 166, 33, 175, 79,
			247, 64, 175, 0, 174, 32, 156, 0, 23, 32, 3, 75, 107, 65, 71, 225, 95, 179, 0, 1, 32, 131, 72, 115, 0, 79,
			32, 123, 67, 103, 0, 38, 32, 7, 64, 127, 225, 95, 179, 0, 227, 165, 0, 0, 161, 32, 119, 64, 135, 0, 56, 32,
			7, 64, 135, 81, 3, 64, 139, 64, 0, 225, 107, 179, 9, 112, 108, 97, 121, 32, 115, 111, 99, 99, 101, 65, 145,
			0, 0, 225, 0, 179, 0, 199, 33, 47, 64, 178, 64, 3, 66, 235, 32, 14, 96, 3, 64, 15, 225, 95, 179, 64, 107,
			64, 119, 66, 238, 64, 7, 64, 3, 64, 0, 225, 95, 179, 64, 107, 64, 0, 224, 15, 135, 64, 0, 225, 107, 179,
			23, 102, 114, 117, 105, 116, 121, 32, 98, 114, 105, 100, 103, 101, 0, 0, 0, 1, 0, 0, 0, 72, 45, 35, 9, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

	static class Score {
        final String name;
        private final double time;
        private final boolean hard;
        final boolean online;

        public Score(String name, double time, boolean hard, boolean online) {
            this.name = name;
            this.time = time;
            this.hard = hard;
            this.online = online;
        }

        @Override
        public String toString() {
            return "Score [name=" + name + ", time=" + time + ","
            + (hard ? " (hard)" : "")
            + (online ? " (online)" : "") + "]";
        }
	}

	public static void main(String[] args) {
//		System.out.println(Arrays.equals(decode(in1), out1));
//		System.out.println(Arrays.equals(decode(in2), out2));

		decode(in3);
		for (Score s : parse(out2))
		    System.out.println(s);
	}

	static List<Score> parse(char[] b) {
		final List<Score> ret = new ArrayList<Score>(b.length / 32);
		int ptr = 0;
		while (ptr < b.length - 30) {
			final String name = cstring(b, ptr, 16);
			ptr += 16;
			final double time = dword(b, ptr) / 120.;
			ptr += 4;
			final boolean hard = b[ptr + 6] != 0;
			final boolean online = b[ptr + 7] != 0;
			ptr += 12;
			ret.add(new Score(name, time, hard, online));
		}
		return ret;
	}

	private static long dword(char[] b, int ptr) {
		return (b[ptr] + (b[ptr + 1] << 8));
	}

	private static String cstring(char[] b, int ptr, int i) {
		final String s = new String(b, ptr, i);
		final int ind = s.indexOf(0);
		if (-1 == ind)
			return s;
		return s.substring(0, ind);
	}

	static char[] decode(char[] in) {
		char[] out = new char[in.length * 5];

		int outptr = 0;
		int inptr = 0;
		char flag = in[inptr++];
		flag &= 0x1f;
		char esp10 = flag;

		while (true) {
			if (flag >= 0x20) {

				char highflag = (char) (flag >> 5);
				int lowflag = -((flag & 0x1f) << 8);

				--highflag;

				if (6 == highflag) {
					highflag = (char) (in[inptr++] + 6);
				}

				lowflag -= in[inptr++];

				int sourceptr = outptr + lowflag;

				if (inptr < in.length)
					esp10 = flag = in[inptr++];
				else
					throw new AssertionError();

				if (outptr == sourceptr) {

					char thing = out[outptr - 1];

					out[outptr++] = thing;
					out[outptr++] = thing;
					out[outptr++] = thing;

					if (highflag != 0) {

						flag = esp10;

						for (int i = 0; i < highflag; ++i)
							out[outptr++] = thing;
					}
				} else {

					--sourceptr;

					out[outptr++] = out[sourceptr++];
					out[outptr++] = out[sourceptr++];
					out[outptr++] = out[sourceptr++];

					if ((highflag & 1) == 1) {

						out[outptr++] = out[sourceptr++];

						--highflag;
					}

					int tooutptr = outptr;
					outptr += highflag;
					highflag >>= 1;

					while (highflag != 0) {
						out[tooutptr++] = out[sourceptr++];
						out[tooutptr++] = out[sourceptr++];

						--highflag;
					}
				}
			} else {
				++flag;
				int inend = inptr + flag;
				if (inend >= in.length)
					return Arrays.copyOfRange(out, 0, outptr);

				for (int i = 0; i < flag; ++i)
					out[outptr++] = in[inptr++];

				flag = in[inptr++];
				esp10 = flag;
			}
		}

	}
}
